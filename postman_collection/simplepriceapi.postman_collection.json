{
	"info": {
		"_postman_id": "7ced41bf-06c0-4c58-8faa-cf16c9ba641b",
		"name": "Simple Price API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40852705"
	},
	"item": [
		{
			"name": "Simple Price",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify response contains expected data\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    let cryptoId = pm.environment.get(\"crypto_id\");\r",
							"    let currency = pm.environment.get(\"currency\");\r",
							"\r",
							"    // ðŸŸ¢ Test Case 1: Check if Status Code is 200\r",
							"    pm.test(\"Status code is expected\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    // Ensure cryptoId and currency are provided\r",
							"    if (pm.response.code === 200 && cryptoId && currency) {\r",
							"        let cryptoList = cryptoId.toLowerCase().split(\",\");\r",
							"        let currencyList = currency.toLowerCase().split(\",\");\r",
							"        const testCase = pm.iterationData.get(\"test_case\");\r",
							"\r",
							"        // ðŸ”´ Test Case 2: Invalid Cryptocurrency should return an empty object\r",
							"        if (cryptoId === \"invalid\") {\r",
							"            pm.test(\"Invalid cryptocurrency should return an empty object {}\", function () {\r",
							"                if (testCase === \"Invalid cryptocurrency\") {\r",
							"                    pm.expect(jsonData).to.be.empty;\r",
							"                }\r",
							"            });\r",
							"        }\r",
							"        // ðŸ”´ Test Case 3: Invalid or Missing Currencies should return {} for each crypto\r",
							"        else if (!currency || currency === \"invalid\") {\r",
							"            pm.test(\"Invalid currency or missing currencies should return {} for each crypto\", function () {\r",
							"                if ([\"Invalid currency\", \"Missing currencies\"].includes(testCase)) {\r",
							"                    let expectedResponse = {};\r",
							"                    cryptoList.forEach(crypto => expectedResponse[crypto] = {});\r",
							"                    pm.expect(jsonData).to.deep.equal(expectedResponse);\r",
							"                }\r",
							"            });\r",
							"        }\r",
							"        // âœ… Test Case 4: Valid Response - Check if response contains expected cryptocurrency and currency data\r",
							"        else {\r",
							"            pm.test(\"Valid response contains expected cryptocurrency and currency data\", function () {\r",
							"                cryptoList.forEach(crypto => {\r",
							"                    pm.expect(jsonData).to.have.property(crypto);\r",
							"\r",
							"                    currencyList.forEach(curr => {\r",
							"                        pm.expect(jsonData[crypto]).to.have.property(curr);\r",
							"                    });\r",
							"                });\r",
							"            });\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"// ðŸš€ **Performance Test**\r",
							"pm.test(\"Response time should be within acceptable limits (<1 second)\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1100);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (pm.iterationData.get(\"crypto_id\") !== \"N/A\") {\r",
							"    pm.environment.set(\"crypto_id\", pm.iterationData.get(\"crypto_id\"));\r",
							"} else {\r",
							"    pm.environment.unset(\"crypto_id\");\r",
							"}\r",
							"\r",
							"if (pm.iterationData.get(\"currency\") !== \"N/A\") {\r",
							"    pm.environment.set(\"currency\", pm.iterationData.get(\"currency\"));\r",
							"} else {\r",
							"    pm.environment.unset(\"currency\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "x-cg-demo-api-key",
						"value": "CG-MrZTDqigbpkzzTobjWKz3N5r"
					}
				],
				"url": {
					"raw": "https://api.coingecko.com/api/v3/simple/price?ids={{crypto_id}}&vs_currencies={{currency}}",
					"protocol": "https",
					"host": [
						"api",
						"coingecko",
						"com"
					],
					"path": [
						"api",
						"v3",
						"simple",
						"price"
					],
					"query": [
						{
							"key": "ids",
							"value": "{{crypto_id}}"
						},
						{
							"key": "vs_currencies",
							"value": "{{currency}}"
						}
					]
				},
				"description": "Generated from cURL: curl --request GET  \n\\--url [https://api.coingecko.com/api/v3/simple/price](https://api.coingecko.com/api/v3/simple/price)  \n\\--header 'accept: application/json'  \n\\--header 'x-cg-demo-api-key: CG-MrZTDqigbpkzzTobjWKz3N5r '"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}